/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Auto-generated code. Do not edit.

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Google.GenAI.Serialization;

namespace Google.GenAI.Types {
  /// <summary>
  /// Response message for API call.
  /// </summary>

  public record LiveServerMessage {
    /// <summary>
    /// Sent in response to a `LiveClientSetup` message from the client.
    /// </summary>
    [JsonPropertyName("setupComplete")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LiveServerSetupComplete ? SetupComplete { get; set; }

    /// <summary>
    /// Content generated by the model in response to client messages.
    /// </summary>
    [JsonPropertyName("serverContent")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LiveServerContent
        ? ServerContent {
            get; set;
          }

    /// <summary>
    /// Request for the client to execute the `function_calls` and return the responses with the
    /// matching `id`s.
    /// </summary>
    [JsonPropertyName("toolCall")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LiveServerToolCall
        ? ToolCall {
            get; set;
          }

    /// <summary>
    /// Notification for the client that a previously issued `ToolCallMessage` with the specified
    /// `id`s should have been not executed and should be cancelled.
    /// </summary>
    [JsonPropertyName("toolCallCancellation")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LiveServerToolCallCancellation
        ? ToolCallCancellation {
            get; set;
          }

    /// <summary>
    /// Usage metadata about model response(s).
    /// </summary>
    [JsonPropertyName("usageMetadata")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public UsageMetadata
        ? UsageMetadata {
            get; set;
          }

    /// <summary>
    /// Server will disconnect soon.
    /// </summary>
    [JsonPropertyName("goAway")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LiveServerGoAway
        ? GoAway {
            get; set;
          }

    /// <summary>
    /// Update of the session resumption state.
    /// </summary>
    [JsonPropertyName("sessionResumptionUpdate")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LiveServerSessionResumptionUpdate
        ? SessionResumptionUpdate {
            get; set;
          }

    /// <summary>
    /// Deserializes a JSON string to a LiveServerMessage object.
    /// </summary>
    /// <param name="jsonString">The JSON string to deserialize.</param>
    /// <param name="options">Optional JsonSerializerOptions.</param>
    /// <returns>The deserialized LiveServerMessage object, or null if deserialization
    /// fails.</returns>
    public static LiveServerMessage
        ? FromJson(string jsonString, JsonSerializerOptions? options = null) {
      try {
        return JsonSerializer.Deserialize<LiveServerMessage>(jsonString, options);
      } catch (JsonException e) {
        Console.Error.WriteLine($"Error deserializing JSON: {e.ToString()}");
        return null;
      }
    }
  }
}
